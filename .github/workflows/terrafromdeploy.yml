name: Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      service-storage:
        description: 'Deploy Storage Account'
        type: boolean
        default: false
      service-uai:
        description: 'Deploy User Assigned Identity'
        type: boolean
        default: false
      service-kv:
        description: 'Deploy Key Vault'
        type: boolean
        default: false
      service-acr:
        description: 'Deploy Container Registry'
        type: boolean
        default: false
      service-container:
          description: 'Build Container Image'
          type: boolean
          default: false
      service-web:
        description: 'Deploy Web App'
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

env:
  TERRAFORM_STORAGE_RG: "MDC-Demo-rg"
  TERRAFORM_STORAGE_ACCOUNT: "mdcdemosa01"
  TERRAFORM_STORAGE_CONTAINER: "tfstate"

jobs:
  storage-deployment:
    runs-on: ubuntu-latest
    if: |
      inputs.service-storage == true
    outputs:
      storage_account_name: ${{ env.TERRAFORM_STORAGE_ACCOUNT }}
      container_name: ${{ env.TERRAFORM_STORAGE_CONTAINER }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login with Managed Identity
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Install Az PowerShell module
        shell: pwsh
        run: |
          Install-Module -Name Az -Force -AllowClobber -Scope CurrentUser

      - name: Setup Azure PowerShell Context
        shell: pwsh
        run: |
          Set-AzContext -Subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Deploy Storage Account
        if: inputs.service-storage == true
        shell: pwsh
        run: |
          ./PowerShell/New-AzStorageAccount.ps1 `
            -tfBackendResourceGroupName "${{ env.TERRAFORM_STORAGE_RG }}" `
            -tfBackendStorageAccountName "${{ env.TERRAFORM_STORAGE_ACCOUNT }}" `
            -tfBackendStorageAccountSku "Standard_LRS" `
            -tfBackendContainerName "${{ env.TERRAFORM_STORAGE_CONTAINER }}"

  service-uai:
    needs: storage-deployment
    if: inputs.service-uai == 'true' && (inputs.service-storage == 'false' || inputs.service-container == 'false') || always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform Azure Auth
        run: |
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_OIDC_TOKEN_FILE_PATH=${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.USER_ASSIGNED_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Azure Login with Managed Identity
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.4

      - name: Terraform Init
        env:
          ARM_USE_OIDC: true
          ARM_OIDC_TOKEN_FILE_PATH: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TERRAFORM_STORAGE_RG }}" \
            -backend-config="storage_account_name=${{ env.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TERRAFORM_STORAGE_CONTAINER }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.USER_ASSIGNED_CLIENT_ID }}" \
            -backend-config="use_oidc=true" \
            -backend-config="key=01-service-uai.tfstate"
        working-directory: Terraform/01-service-uai

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: Terraform/01-service-uai

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: Terraform/01-service-uai

  service-kv:
    needs: storage-deployment
    if: inputs.service-kv == true && (inputs.service-storage == false || inputs.service-container == false) || always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform Azure Auth
        run: |
          echo "ARM_USE_MSI=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.USER_ASSIGNED_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Azure Login with Managed Identity
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.4

      - name: Terraform Init
        env:
          ARM_USE_MSI: true
          ARM_CLIENT_ID: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TERRAFORM_STORAGE_RG }}" \
            -backend-config="storage_account_name=${{ env.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TERRAFORM_STORAGE_CONTAINER }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.USER_ASSIGNED_CLIENT_ID }}" \
            -backend-config="use_oidc=true" \
            -backend-config="key=02-service-kv.tfstate"
        working-directory: Terraform/02-service-kv

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: Terraform/02-service-kv

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: Terraform/02-service-kv

  service-acr:
    needs: storage-deployment
    if: inputs.service-acr == true && (inputs.service-storage == false || inputs.service-container == false) || always()
    runs-on: ubuntu-latest
    outputs:
      acr_name: mdcdemoacr01
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform Azure Auth
        run: |
          echo "ARM_USE_MSI=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.USER_ASSIGNED_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Azure Login with Managed Identity
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.4

      - name: Terraform Init
        env:
          ARM_USE_MSI: true
          ARM_CLIENT_ID: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TERRAFORM_STORAGE_RG }}" \
            -backend-config="storage_account_name=${{ env.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TERRAFORM_STORAGE_CONTAINER }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.USER_ASSIGNED_CLIENT_ID }}" \
            -backend-config="use_oidc=true" \
            -backend-config="key=03-service-acr.tfstate"
        working-directory: Terraform/03-service-acr

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: Terraform/03-service-acr

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: Terraform/03-service-acr

  build-and-push:
    needs: service-acr
    if: |
      inputs.service-container == true &&
      (github.event_name == 'push' && contains(github.event.changes, 'website/'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login with Managed Identity
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: ACR Login with Azure CLI
        run: |
          az acr login --name ${{ needs.service-acr.outputs.acr_name }}

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          ACR_NAME=${{ needs.service-acr.outputs.acr_name }}
          docker build -t ${ACR_NAME}.azurecr.io/newssite:${IMAGE_TAG} ./website
          docker push ${ACR_NAME}.azurecr.io/newssite:${IMAGE_TAG}
          docker tag ${ACR_NAME}.azurecr.io/newssite:${IMAGE_TAG} ${ACR_NAME}.azurecr.io/newssite:latest
          docker push ${ACR_NAME}.azurecr.io/newssite:latest

  service-web:
    needs: [storage-deployment, build-and-push]
    if: inputs.service-web == true && (inputs.service-storage == false || inputs.service-container == false) || always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform Azure Auth
        run: |
          echo "ARM_USE_MSI=true" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.USER_ASSIGNED_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Azure Login with Managed Identity
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.4

      - name: Terraform Init
        env:
          ARM_USE_MSI: true
          ARM_CLIENT_ID: ${{ secrets.USER_ASSIGNED_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TERRAFORM_STORAGE_RG }}" \
            -backend-config="storage_account_name=${{ env.TERRAFORM_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.TERRAFORM_STORAGE_CONTAINER }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="client_id=${{ secrets.USER_ASSIGNED_CLIENT_ID }}" \
            -backend-config="use_oidc=true" \
            -backend-config="key=04-service-web.tfstate"
        working-directory: Terraform/04-service-web

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: Terraform/04-service-web

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: Terraform/04-service-web
